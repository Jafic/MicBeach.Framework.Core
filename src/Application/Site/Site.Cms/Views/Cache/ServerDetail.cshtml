
@{
    ViewBag.Title = "缓存服务详情";
}
@using MicShop.ViewModel.Cache;
@using MicBeach.Util.Serialize;
@using MicBeach.Cache;
@model ServerViewModel
<environment>
    <link href="~/lib/ztree/skin.css" rel="stylesheet" />
</environment>
<div id="pc-head" class="b_c1 b_b_none">
    <div class="form-con" id="home">
        <div class="form-ingroup">
            <div class="fig-body">
                <table cellpadding="0" cellspacing="0" class="detail-table">
                    <tr>
                        <td class="detail-tit w-150">服务器名称：</td>
                        <td class="w_150 detail-txt">@Model.Name</td>
                        <td class="detail-tit w-150">类型：</td>
                        <td class="w_150 detail-txt">@Model.Type</td>
                        <td class="detail-tit w-150">地址：</td>
                        <td class="detail-txt">@Model.Host</td>
                    </tr>
                    <tr>
                        <td class="detail-tit">用户名：</td>
                        <td class="detail-txt">@Model.UserName</td>
                        <td class="detail-tit">密码：</td>
                        <td class="detail-txt">@Model.Password</td>
                        <td class="detail-tit">说明：</td>
                        <td class="detail-txt">@Model.Remark</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>
<div id="pc-body">
    <div id="pc-body-inner">
        <div class="form_tabgroup c_pagecon">
            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active">
                    <a href="#goodsinfo" role="tab" data-toggle="tab" style="border-radius:0px;border-left:none !important">数据</a>
                </li>
                <li role="presentation">
                    <a href="#server_config" id="tab_btn_config" role="tab" data-toggle="tab">配置信息</a>
                </li>
            </ul>
            <div class="form_tabgconent tab-content c_body">
                <div role="tabpanel" class="tab-pane active c_pagecon" id="goodsinfo">
                    <div class="c_body">
                        <div class="w-250 hp-100 fl">
                            <div class="treelistgroup c_pagecon" style="border-radius:0px">
                                <div class="c_head">
                                    <div class="tlg_btncon bg-f5 b_l_none">
                                        <button type="button" class="btn btn-xs btn-danger" id="btn_clearselect"><i class="glyphicon glyphicon-trash"></i> 清除选中数据</button>
                                    </div>
                                </div>
                                <div class="c_body tlg_treecon b_l_none b_t_none b_b_none">
                                    <div class="c_bodyinner">
                                        <ul id="CacheDb_Tree" class="ztree"></ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="hp-100 c_pagecon" id="user_app_rightcontent">
                            <div class="c_head lis_search pd-10" id="user_search">
                                <div class="input-group">
                                    <input type="text" class="form-control w-200" id="search_keyname" placeholder="键名称">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default fc_3" type="button" id="searchbusiness_btn" onclick="LoadDataBaseKeys()"><i class="glyphicon glyphicon-search"></i></button>
                                    </span>
                                </div>
                                <button class="btn btn-success" type="button" id="btn_addcacheitem"><i class="glyphicon glyphicon-plus"></i> 添加</button>
                                <button class="btn btn-danger" type="button" id="btn_delselectkeys"><i class="glyphicon glyphicon-trash"></i> 删除选中</button>
                            </div>
                            <div class="c_body">
                                <table class="table table-striped table-bordered nowrap wp-100 bd-lw-0" cellpadding="0" cellspacing="0" id="cachevalue_table"></table>
                            </div>
                            <div class="c_foot b_l_none b_r_none" id="dbkeys_tabe_pager"></div>
                        </div>
                    </div>
                </div>

                <div id="server_config" class="tab-pane c_pagecon">
                    <div class="c_body">
                        <div class="c_bodyinner" id="server_config_content"></div>
                    </div>
                    <div class="c_foot">
                        <div class="form_bottom">
                            <button class="btn btn-success" id="btn_saveconfig"><i class="glyphicon glyphicon-edit"></i> 应用配置</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="pc-foot">
    <div class="txt-right form-submitbtn-con pdr-10"><button type="button" id="btn_testconn" class="btn btn-success">测试连结</button></div>
</div>
@section Scripts
    {
    <environment include="Development">
        <script src="~/lib/ztree/jquery.ztree.all.js"></script>
        <script src="~/lib/ztree/ztree.exhide.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/lib/ztree/tree.min.js"></script>
    </environment>
    <script type="text/javascript">
        BodyScroll = false
        HasDivPageCon = true;
        TabConentScroll = true;
        var serverData = JSON.parse('@Html.Raw(JsonSerialize.ObjectToJson(Model))');
        var nowDb = -1;
        var loadedConfig = false;
        var seetings = {
            view: {
                nameIsHTML: true
            },
            callback: {
                onClick: AllDbNodeClick,
            },
            check: {
                enable: true,
                chkboxType: { "Y": "", "N": "" }
            },
            edit: {
                enable: true,
                showRemoveBtn: false,
                showRenameBtn: false
            }
        };

        $(function () {
            $.fn.zTree.init($("#CacheDb_Tree"), seetings, []);//初始化数据库数

            InitDataTable({
                TableEle: '#cachevalue_table',
                "columnDefs": [
                            {
                                "title": '<input type="checkbox" class="cbx_all"/>', "targets": 0, "data": function (row, type, val, meta) {
                                    return '<input type="checkbox" class="cbx_val" value="' + row.Key + '"/>';
                                }, width: '20px', className: 'txt-center'
                            },
                            { "title": '键', "targets": 1, "data": "Key", "width": '150px', "className": '' },
                            {
                                "title": '类型', "targets": 2, "data": function (row, type, val, meta) {
                                    var typeVal = '';
                                    switch (row.Type)
                                    {
                                        case @((int)CacheKeyType.String):
                                            typeVal='字符串';
                                            break;
                                        case @((int)CacheKeyType.List):
                                            typeVal='列表';
                                            break;
                                        case @((int)CacheKeyType.Set):
                                            typeVal='集合';
                                            break;
                                        case @((int)CacheKeyType.SortedSet):
                                            typeVal='有序集合';
                                            break;
                                        case @((int)CacheKeyType.Hash):
                                            typeVal='Hash对象';
                                            break;
                                    }
                                    return typeVal;
                                }, "width": '100px',"className": ''
                            },
                            { "title": '值', "targets": 3, "data":function (row, type, val, meta){
                                if(row.Type==@((int)CacheKeyType.String)){
        return row.Value;
                            }else{
                            return '';
                }
                            }, "className": '' },
                            {
                                "title": "操作", "targets": 4, "data": function (row, type, val, meta) {
                                    var menuItems = new Array();
                                    menuItems.push('<li><a href="javascript:void(0)" class="btn_keydetail" keyval="_keyval"><i class="glyphicon glyphicon-list-alt"></i> 详情</a></li>'.replace('_keyval', row.Key));
                                    menuItems.push('<li><a href="javascript:void(0)" class="btn_removekey" keyval="_keyval"><i class="glyphicon glyphicon-trash"></i> 删除</a></li>'.replace('_keyval', row.Key));
                                    var menuString = menuItems.join('');
                                    return '<div class="btn-group"><button type="button" class="btn btn-blue dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">管理 <span class="caret"></span></button><ul class="dropdown-menu list-dropdown-menu w-62">' + menuString + '</ul></div>';
                                }, width: '62px', className: 'txt-center'
                            }
                ]
            });

            //删除选中键值
            $("#btn_delselectkeys").click(function () {
                var keys = GetCheckedSysNos("#dbkeys_tabe_page_list");
                RemoveKey(keys);
            });
            //删除键值
            $("body").on("click", ".btn_removekey", function () {
                var key = $.trim($(this).attr("keyval"));
                if (key == "") {
                    return;
                }
                var keyArray = new Array();
                keyArray.push(key);
                RemoveKey(keyArray);
            });
            //清空数据
            $("#btn_clearselect").click(function () {
                var checkNodes = $.fn.zTree.getZTreeObj("CacheDb_Tree").getCheckedNodes();
                var dbArray = new Array();
                for (var n in checkNodes) {
                    var nowNode = checkNodes[n];
                    dbArray.push(nowNode.id);
                }
                ClearData(dbArray);
            });
            //详情
            $("body").on("click", ".btn_keydetail", function () {
                var key = $.trim($(this).attr("keyval"));
                if (key == "") {
                    return;
                }
                var url = '@Html.Raw(Url.Action("KeyItemDetail","Cache",new { serverId=Model.Id, dbIndex="_dbindex", key="_key"}))'.replace("_dbindex", nowDb).replace("_key", key);
                DialogPage({
                    url: url,
                    width: "600px",
                    height: "330px",
                    title: '缓存数据详情',
                    ok: false,
                    cancel: null
                });
            });
            //加载配置信息按钮
            $("#tab_btn_config").click(function () {
                if (!loadedConfig) {
                    LoadServerConfig();
                }
            });
            $("#btn_saveconfig").click(function () {
                $("#cacheserverconfig_form").submit();
            });

            //测试链接
            $("#btn_green").click(function () {

            });

        //添加缓存项
            $("#btn_addcacheitem").click(function(){
                var url = '@Html.Raw(Url.Action("AddItem", "Cache",new { serverId=Model.Id, dbIndex="_dbindex"}))'.replace("_dbindex", nowDb);
                DialogPage({
                    url: url,
                    width: "600px",
                    height: "330px",
                    title: '添加缓存项',
                    ok: false,
                    cancel: null
                });
            });
            LoadDataBase();
        });

        //加载服务器数据库
        function LoadDataBase() {
            $.post('@Url.Action("GetServerDataBase")', { server: serverData }, function (res) {
                if (res) {
                    if (res.Success) {
                        var jsonData = JSON.parse(res.Data);
                        $.fn.zTree.getZTreeObj("CacheDb_Tree").addNodes(null, -1, jsonData);
                    }
                }
            });
        }

        //数据库节点点击
        function AllDbNodeClick(event, treeId, treeNode) {
            nowDb = parseInt(treeNode.id);
            LoadDataBaseKeys();
        }

        //加载数据库键值
        function LoadDataBaseKeys() {
            if (nowDb < 0) {
                return;
            }
            var keyName = $.trim($("#search_keyname").val());
            var data = {
                server: serverData,
                keyFilter: {
                    KeyMateKey: keyName,
                    DbIndex: nowDb
                }
            };
            PageSearch({
                url: '@Url.Action("GetKeys", "Cache")',
                data: data,
                listEle: "#cachevalue_table",
                pagerEle: "#dbkeys_tabe_pager",
                //callback: function () {
                //    $(window).resize();
                //}
            });
        }

        //移除缓存项
        function RemoveKey(keys) {
            if (!keys || keys.length <= 0) {
                return;
            }
            ConfirmMsg('确认移除缓存数据吗?', function () {
                var data = {
                    server: serverData,
                    removeInfo: {
                        Keys: keys,
                        DbIndex: nowDb
                    }
                };
                $.post('@Url.Action("RemoveKeys", "Cache")', data, function (res) {
                    ResultMsg(res);
                    if (res.Success) {
                        LoadDataBaseKeys();
                    }
                });
            });
        }

        //清空数据
        function ClearData(dbs) {
            if (!dbs || dbs.length <= 0) {
                return;
            }
            ConfirmMsg('确认要清空选中数据库的数据吗?', function () {
                var data = {
                    server: serverData,
                    dbs: dbs
                };
                $.post('@Url.Action("ClearData", "Cache")', data, function (res) {
                    ResultMsg(res);
                    if (res.Success) {
                        LoadDataBaseKeys();
                    }
                });
            });
        }

        //加载服务配置
        function LoadServerConfig() {
            $.post('@Url.Action("GetCacheServerConfig","Cache")', { server: serverData }, function (res) {
                if (res.Success) {
                    $("#server_config_content").html(res.Data);
                    loadedConfig = true;
                    $(window).resize();
                }
            });
        }

        //配置保存成功
        function CacheServerConfigSuccessCallback(res) {
            ResultMsg(res);
        }

        //配置保存失败
        function CacheServerConfigFailedCallback(res) {
            ResultMsg(res);
        }
    </script>
}